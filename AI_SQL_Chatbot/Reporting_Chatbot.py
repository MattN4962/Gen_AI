import mysql.connector
import pandas as pd
from transformers import pipeline
import gradio as gr
import re
#This file is just to test the connection and a simple query
# Database connection configuration
config = {
    'user': 'root',
    'password': 'mysqlserver',
    'host': 'localhost',
    'port': 3306,
    'database':'Main'
}
# Load the language model
llm = pipeline('text2text-generation', model='google/flan-t5-small', max_length=512)

def get_db_connection():
    try:
        conn = mysql.connector.connect(**config)
        cursor = conn.cursor(dictionary=True)
        print("Database connection established.")
        return conn, cursor
    except mysql.connector.Error as err:
        print(f"Error: {err}")
        return None, None

def is_Sql_safe(query: str) -> bool:
    # Define a list of forbidden keywords
    forbidden_keywords = ['DROP', 'DELETE', 'INSERT', 'UPDATE', 'ALTER', 'CREATE', 'TRUNCATE', 'EXEC', 'EXECUTE']
    
    clean_sql = query.strip().lower()

    # Check for forbidden keywords in the query (case-insensitive)
    if any(word in clean_sql for word in forbidden_keywords):
        return False
    if not clean_sql.startswith("select"):
        return False
    if not re.match(r"(?i)^select\s.+from\s.+", clean_sql):
        return False
    return True

# Returns SQL query generated by the LLM
def generate_sql(user_query: str) -> str:
    prompt = f"""
    You are an expert SQL generator. Given a user query, generate a safe SQL SELECT statement to retrieve the requested data from the database. 
    Ensure the SQL statement is syntactically correct and only uses SELECT statements. Do not include any other SQL commands.
    User Query: {user_query}
    SQL Query:
    """
    sql = llm(prompt, max_length=150)[0]['generated_text']
    return sql

# Executes the SQL query and returns the results as a DataFrame
def run_SQL_query(sql: str) -> pd.DataFrame:
    conn, cursor = get_db_connection()
    if conn is None or cursor is None:
        return pd.DataFrame()
    
    if not is_Sql_safe(sql):
        print("Unsafe SQL query detected.")
        connection_cleanup(conn, cursor)
        return pd.DataFrame()
    
    try:
        cursor.execute(sql)
        results = cursor.fetchall()
        df = pd.DataFrame(results)
        return df
    except mysql.connector.Error as err:
        print(f"SQL Error: {err}")
        return pd.DataFrame()
    finally:
        connection_cleanup(conn, cursor)

# Close all connections
def connection_cleanup(conn, cursor):
    cursor.close()
    conn.close()
    print("Database connection closed.")